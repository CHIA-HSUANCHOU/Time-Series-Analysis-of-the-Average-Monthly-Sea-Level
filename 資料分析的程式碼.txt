
sealevel = read.csv("資料檔_sealevel.csv", header = T)
#將2002/1~2021/12的資料作為訓練資料
sealevel_train = sealevel[1:240,] 
#2022/1~2022/12的資料作為測試資料
sealevel_test = sealevel[241:252,]    
#讀取每月平均海平面高度
MSL_train = sealevel_train[,6]       
MSL_test = sealevel_test[,6]

#原始資料的時間序列圖
ts.plot(MSL_train, main = "mean sea level", ylab = "ft")
#原始資料的ACF圖
acf(MSL_train,60, ylab="", main = "ACF of Mean Sea Level")
abline(h = 0.5, col = "red", lty ="dashed")
#資料有上升的趨勢，並配適一個一次方迴歸模型
ts.plot(MSL_train, main = "mean sea level", ylab = "ft")
abline(reg = lm(MSL_train~time(MSL_train)), col = "red")

#一次方迴歸模型的係數
fit <- lm(MSL_train~time(MSL_train))
summary(fit)

#用一次迴歸後的殘差來進行後續的SARIMA模型建構
HH_train = resid(fit)

#ADF test檢定資料是否stationary
library(tseries)
adf.test(HH_train)

#配適一次方的迴歸模型後殘差的時間序列圖
ts.plot(HH_train, main = "the residual of monthly sea level", ylab = "ft")

#資料的ACF圖和PACF圖
par(mfrow=c(2,1))
acf_number = acf(HH_train, 60)
pacf_number = pacf(HH_train, 60)
#ACF圖
acf(HH_train,60, ylab="", main = "ACF of Mean Sea Level")
#紅色為季節性期數
for (i in 1:5){
  t = i*12
  z = acf_number[t]$acf
  lines(c(t,t), c(0,z), col = "red", lwd = 2.3)
}	
#橘色為ACF在季節性期數的截斷在前後2期
for (i in c(10, 11, 13, 14, 22, 23, 25, 26, 34, 35, 37, 38, 46, 47, 49, 50, 58, 59, 61, 62)){
  a = i
  b = acf_number[a]$acf
  lines(c(a,a), c(0,b), col = "orange", lwd = 2.3)
}	
#PACF圖
pacf(HH_train,60, ylab="", main = "PACF of Mean Sea Level")
#紅色為季節性期數
for (i in 1:5){
  t = i*12
  z = pacf_number[t]$acf
  lines(c(t,t), c(0,z), col = "red", lwd = 2.3)
}	
#橘色為PACF在季節性期數截斷在前後2期
for (i in c(10, 11, 13, 14, 22, 23, 25, 26, 34, 35, 37, 38, 46, 47, 49, 50, 58, 59, 61, 62)){
  a = i
  b = pacf_number[a]$acf
  lines(c(a,a), c(0,b), col = "orange", lwd = 2.3)
}	
#黃色為PACF在季節性期數的截斷在前後3期
for (i in c(9, 15, 21, 27, 33, 39, 45, 51, 57, 63)){
  a = i
  b = pacf_number[a]$acf
  lines(c(a,a), c(0,b), col = "yellow", lwd = 2.3)
}	

#SARIMA模型建構
fit_002_100<- arima(HH_train, order=c(0,0,2), seasonal=list(order=c(1,0,0), period=12))
fit_200_100<- arima(HH_train, order=c(2,0,0), seasonal=list(order=c(1,0,0), period=12))
fit_300_100<- arima(HH_train, order=c(3,0,0), seasonal=list(order=c(1,0,0), period=12))
fit_101_100<- arima(HH_train, order=c(1,0,1), seasonal=list(order=c(1,0,0), period=12))
fit_102_100<- arima(HH_train, order=c(1,0,2), seasonal=list(order=c(1,0,0), period=12))
fit_002_101<- arima(HH_train, order=c(0,0,2), seasonal=list(order=c(1,0,1), period=12))
fit_200_101<- arima(HH_train, order=c(2,0,0), seasonal=list(order=c(1,0,1), period=12))
fit_300_101<- arima(HH_train, order=c(3,0,0), seasonal=list(order=c(1,0,1), period=12))
fit_101_101<- arima(HH_train, order=c(1,0,1), seasonal=list(order=c(1,0,1), period=12))
fit_102_101<- arima(HH_train, order=c(1,0,2), seasonal=list(order=c(1,0,1), period=12))

#對模型進行Ljung-box test檢定
library(TSA)
#n = p+q+P+Q
n = 3
par(mfrow=c(1,1))
fit_model = fit_002_100
rstandard(fit_model)  #package TSA
fit_res = as.vector(rstandard(fit_model))

Box.test(fit_res, lag=24, type="Ljung-Box")
names(Box.test(fit_res, lag=3, type="Ljung-Box"))
B_text_p_value = c(0,0)
for(hh in 3:20){
  B_text_p_value[hh] = Box.test(fit_res, lag=hh, type="Ljung-Box", fitdf=n)$p.value
}
plot(3:20, B_text_p_value[3:20], type="p", 
     main="p values for Ljung-Box statistic", 
     xlab="lag", ylab="p value", ylim=c(0,1))
abline(h=0.05, lty=2, col=4)

#參數估計
fit_200_101
fit_300_101
fit_102_101

#考慮季節性(1,0,0)[12]搭配更多的非季節性order
fit_004_100<- arima(HH_train, order=c(0,0,4), seasonal=list(order=c(1,0,0), period=12))
fit_005_100<- arima(HH_train, order=c(0,0,5), seasonal=list(order=c(1,0,0), period=12))
fit_006_100<- arima(HH_train, order=c(0,0,6), seasonal=list(order=c(1,0,0), period=12))
fit_400_100<- arima(HH_train, order=c(4,0,0), seasonal=list(order=c(1,0,0), period=12))
fit_304_100<- arima(HH_train, order=c(3,0,4), seasonal=list(order=c(1,0,0), period=12))
fit_305_100<- arima(HH_train, order=c(3,0,5), seasonal=list(order=c(1,0,0), period=12))
fit_306_100<- arima(HH_train, order=c(3,0,6), seasonal=list(order=c(1,0,0), period=12))
fit_404_100<- arima(HH_train, order=c(4,0,4), seasonal=list(order=c(1,0,0), period=12))
fit_405_100<- arima(HH_train, order=c(4,0,5), seasonal=list(order=c(1,0,0), period=12))
fit_406_100<- arima(HH_train, order=c(4,0,6), seasonal=list(order=c(1,0,0), period=12))

#對模型進行Ljung-box test檢定
#n = p+q+P+Q
n = 5
par(mfrow=c(1,1))
fit_model = fit_004_100
rstandard(fit_model)  #package TSA
fit_res = as.vector(rstandard(fit_model))

Box.test(fit_res, lag=24, type="Ljung-Box")
names(Box.test(fit_res, lag=3, type="Ljung-Box"))
B_text_p_value = c(0,0)
for(hh in 3:20){
  B_text_p_value[hh] = Box.test(fit_res, lag=hh, type="Ljung-Box", fitdf=n)$p.value
}
plot(3:20, B_text_p_value[3:20], type="p", 
     main="p values for Ljung-Box statistic", 
     xlab="lag", ylab="p value", ylim=c(0,1))
abline(h=0.05, lty=2, col=4)

#參數估計
fit_304_100

#考慮季節性AR(2)[12]
fit_002_200<- arima(HH_train, order=c(0,0,2), seasonal=list(order=c(2,0,0), period=12))
fit_200_200<- arima(HH_train, order=c(2,0,0), seasonal=list(order=c(2,0,0), period=12))
fit_300_200<- arima(HH_train, order=c(3,0,0), seasonal=list(order=c(2,0,0), period=12))
fit_101_200<- arima(HH_train, order=c(1,0,1), seasonal=list(order=c(2,0,0), period=12))
fit_102_200<- arima(HH_train, order=c(1,0,2), seasonal=list(order=c(2,0,0), period=12))
fit_201_200<- arima(HH_train, order=c(2,0,1), seasonal=list(order=c(2,0,0), period=12))
fit_202_200<- arima(HH_train, order=c(2,0,2), seasonal=list(order=c(2,0,0), period=12), method="ML")

fit_302_200<- arima(HH_train, order=c(3,0,2), seasonal=list(order=c(2,0,0), period=12), method="ML")
fit_402_200<- arima(HH_train, order=c(4,0,2), seasonal=list(order=c(2,0,0), period=12))
fit_203_200<- arima(HH_train, order=c(2,0,3), seasonal=list(order=c(2,0,0), period=12))
fit_204_200<- arima(HH_train, order=c(2,0,4), seasonal=list(order=c(2,0,0), period=12))

#對模型進行Ljung-box test檢定
#n = p+q+P+Q
n = 4
par(mfrow=c(1,1))
fit_model = fit_002_200
rstandard(fit_model)  
fit_res = as.vector(rstandard(fit_model))

Box.test(fit_res, lag=24, type="Ljung-Box")
names(Box.test(fit_res, lag=3, type="Ljung-Box"))
B_text_p_value = c(0,0)
for(hh in 3:20){
  B_text_p_value[hh] = Box.test(fit_res, lag=hh, type="Ljung-Box", fitdf=n)$p.value
}
plot(3:20, B_text_p_value[3:20], type="p", 
     main="p values for Ljung-Box statistic", 
     xlab="lag", ylab="p value", ylim=c(0,1))
abline(h=0.05, lty=2, col=4)

###殘差檢定
n = 6
fit_model = fit_202_200
rstandard(fit_model)  
fit_res = as.vector(rstandard(fit_model))
par(mfrow=c(2,2))
mat1 <- matrix(c(1,2,4,1, 3, 4), nrow = 3, ncol = 2)
layout(mat1, widths = c(1, 1), heights = c(1, 1, 1))
#殘差時間序列圖
ts.plot(rstandard(fit_model), ylab="", main="standardized residuals")
#殘差ACF圖
acf(fit_res,120)
#殘差的Q-Q plot
qqnorm(fit_res)
qqline(fit_res) 
#Ljung-box test
Box.test(fit_res, lag=24, type="Ljung-Box")
names(Box.test(fit_res, lag=3, type="Ljung-Box"))
B_text_p_value = c(0,0)
for(hh in 3:20){
  B_text_p_value[hh] = Box.test(fit_res, lag=hh, type="Ljung-Box", fitdf=n)$p.value
}
plot(3:20, B_text_p_value[3:20], type="p", 
     main="p values for Ljung-Box statistic", 
     xlab="lag", ylab="p value", ylim=c(0,1))
abline(h=0.05, lty=2, col=4)

#參數估計
fit_202_200
fit_402_200

#模型預測
#預測2022年1月~12月迴歸的預測值(y_hat)
pred1 = c()
for (i in 241:252){
  y = 2.8846552 + 0.0017198*i
  pred1 = append(pred1, y)
}

fit_202_200<- arima(HH_train, order=c(2,0,2), seasonal=list(order=c(2,0,0), period=12), method="ML")
#一步至十二步的預測(e_t)
x.pred = predict(fit_202_200, n.ahead=12)
#資料的預測區間上界/下界
pred.U = x.pred$pred + 1.96*x.pred$se + pred1
pred.L = x.pred$pred - 1.96*x.pred$se + pred1
HH_test = MSL_test
par(mfrow=c(1,1))
#2019/1~2021/12的資料
plot(ts(c(MSL_train[205:240], rep(NA,12))), col = "black", ylim = c(2.5, 4), main = "prediction of mean sea level", ylab = "ft")
#預測的線
lines(length(MSL_train[205:240])+(1:12), x.pred$pred+pred1, col="red", lwd = 3.5)
#預測的信賴區間
lines(length(MSL_train[205:240])+(1:12), pred.U, col="orange", lty=2, lwd = 3.5)
lines(length(MSL_train[205:240])+(1:12), pred.L, col="orange", lty=2, lwd = 3.5)
#實際的每月平均海平面高度
points(length(MSL_train[205:240])+(1:12), HH_test, pch=16, col="brown")
#圖標
legend("topleft", legend=c("predicted line", "confidence interval of predicted value", "actual value"),col=c("red", "orange", "brown"), lty=c(1, 2, NA), pch=c(NA, NA,16), lwd = 2, cex=1)

####SVAR模型#################################################################################################################
#讀取溫度、海平面檔案
setwd("C:\\Users\\周佳萱\\Desktop\\時序") 
setwd("C:\\Users\\irene\\Documents\\大學課程\\時間數列\\專案")
data1=read.csv("統計三  李姿穎+周佳萱  (3)資料檔_sealevel.csv")
sealevel=data1[,6]
data2=read.csv("統計三  李姿穎+周佳萱  (3)資料檔_temp.csv")
temp=data2[,3]
#將2002/1~2021/12的資料作為訓練資料
#2022/1~2022/12的資料作為測試資料
temp_train=temp[1:240]
temp_test=temp[241:252]
sealevel_train=sealevel[1:240]
sealevel_test=sealevel[241:252]

#資料的ACF圖和PACF圖
par(mfrow=c(2,2))
temp_train=temp[1:240]
acf_number = acf(temp_train, 60,plot=F)
pacf_number = pacf(temp_train, 60,plot=F)
acf(temp_train,60, ylab="", main = "ACF of Mean temperature")
for (i in 1:5){
  t = i*12
  z = acf_number[t]$acf
  lines(c(t,t), c(0,z), col = "red", lwd = 2.3)
  } 
for (i in c(10, 11, 13, 14, 22, 23, 25, 26, 34, 35, 37, 38, 46, 47, 49, 50, 58, 59, 61, 62)){
  a = i
  b = acf_number[a]$acf
  lines(c(a,a), c(0,b), col = "orange", lwd = 2.3)
  } 
par(mfrow=c(2,1))
pacf(temp_train,60, ylab="", main = "PACF of Mean temperature")
for (i in 1:5){
  t = i*12
  z = pacf_number[t]$acf
  lines(c(t,t), c(0,z), col = "red", lwd = 2.3)
} 
for (i in c(1,2,3)){
  a = i
  b = pacf_number[a]$acf
  lines(c(a,a), c(0,b), col = "orange", lwd = 2.3)
}

#VAR模型建構
library(MTS) 
m100000= VAR(Z, p=1)
#Ljung-Box test檢定
resi = m100000$residuals
mq(resi, adj=1)  
#refine VAR模型
mr100000 = refVAR(m100000, thres=1.96)
#Ljung-Box test檢定
resi = mr100000$residuals
mq(resi, adj=1)
#模型預測與作圖
predi=VARpred(mr100000,12)
x2.pred=predi$pred[,1]
error=predi$se.err[,1]
pred.U = x2.pred + 1.96*error
pred.L = x2.pred - 1.96*error
plot(ts(c(sealevel_train[205:240], rep(NA,12))), col = "black", ylim = c(2.5, 4), main = "VAR(1) prediction of mean sea level", ylab = "ft")
lines(length(sealevel_train[205:240])+(1:12), x2.pred, col="deepskyblue", lwd = 3.5)
lines(length(sealevel_train[205:240])+(1:12), pred.U, col="darkslategrey", lty=2, lwd = 3.5)
lines(length(sealevel_train[205:240])+(1:12), pred.L, col="darkslategrey", lty=2, lwd = 3.5)
points(length(sealevel_train[205:240])+(1:12), sealevel_test, pch=16, col="brown")
legend("topleft", legend=c("predicted line ", "confidence interval", "actual value"),col=c("deepskyblue", "darkslategrey", "brown"), lty=c(1, 2, NA), pch=c(NA, NA,16), lwd = 2, cex=1)

#SVAR模型建構
library(MTS) 
Z=cbind(sealevel_train,temp_train)
m000100=sVARMA(Z, order=c(0,0,0), sorder=c(1,0,0), s=12)
#Ljung-Box test檢定
resi = m000100$residuals
mq(resi, adj=1)

#模型預測與作圖
prediction=sVARMApred(m000100,orig=Z,h=12)$pred
x2.pred=prediction[,1]
error=sVARMApred(m000100,orig=Z,h=12)$se.err[,1]
pred.U = x2.pred + 1.96*error
pred.L = x2.pred - 1.96*error
plot(ts(c(sealevel_train[205:240], rep(NA,12))), col = "black", ylim = c(2.5, 4), main = "SVAR(1) prediction of mean sea level", ylab = "ft")
lines(length(sealevel_train[205:240])+(1:12), x2.pred, col="deepskyblue", lwd = 3.5)
lines(length(sealevel_train[205:240])+(1:12), pred.U, col="darkslategrey", lty=2, lwd = 3.5)
lines(length(sealevel_train[205:240])+(1:12), pred.L, col="darkslategrey", lty=2, lwd = 3.5)
points(length(sealevel_train[205:240])+(1:12), sealevel_test, pch=16, col="brown")
legend("topleft", legend=c("predicted line ", "confidence interval", "actual value"),col=c("deepskyblue", "darkslategrey", "brown"), lty=c(1, 2, NA), pch=c(NA, NA,16), lwd = 2, cex=1)
##合併SARIMA、SVAR圖
plot(ts(c(MSL_train[205:240], rep(NA,12))), col = "black", ylim = c(2.5, 4), main = "prediction of mean sea level", ylab = "ft")
lines(length(MSL_train[205:240])+(1:12), x.pred$pred+pred1, col="red", lwd = 3.5)
lines(length(sealevel_train[205:240])+(1:12), x2.pred, col="deepskyblue", lwd = 3.5)
points(length(MSL_train[205:240])+(1:12), HH_test, pch=16, col="brown")
legend("topleft", legend=c("with regression SARIMA predicted line ", "SVAR predicted line ", "actual value"),col=c("red","deepskyblue", "brown"), lty=c(1, 1, NA), pch=c(NA, NA,16), lwd = 2, cex=1)

####ARCH effect################################################################################

#殘差平方的PACF圖
HH_res2 = (fit_202_200$residuals)^2
pacf(HH_res2,60, ylab="", main = "PACF of residuals square")
lines(c(12,12), c(0,0.235), col = "red", lwd = 2.3)
lines(c(20,20), c(0,-0.140), col = "red", lwd = 2.3)

#進行ARCH effect的相關檢定：Portmanteau-Q test/Lagrange multiplier test
library(aTSA)
arch.test(arima(HH_train, order=c(2,0,2), seasonal=list(order=c(2,0,0), period=12), method="ML"), output = TRUE)
